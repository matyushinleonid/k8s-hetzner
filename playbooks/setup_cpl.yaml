---
- name: Setup Kubernetes Control Plane Node
  hosts: control_plane_nodes
  become: true
  vars:
    kubernetes_version: "1.30.1-00"
    pod_network_cidr: "192.168.0.0/16"
    control_plane_endpoint: "{{ internal_ipv4 }}:6443"
    kube_user: "root"

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        force: yes

    - name: Install required packages
      apt:
        name:
          - curl
          - apt-transport-https
          - git
          - wget
          - software-properties-common
          - lsb-release
          - ca-certificates
          - socat
        state: present
        update_cache: yes

    - name: Install nano text editor
      apt:
        name: nano
        state: present

    - name: Disable swap
      command: swapoff -a
      ignore_errors: yes

    - name: Ensure swap is disabled permanently
      lineinfile:
        path: /etc/fstab
        regexp: '^\S+\s+swap\s+'
        line: '#\0'
        backup: yes

    - name: Configure sysctl for Kubernetes networking
      copy:
        dest: /etc/sysctl.d/kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
      notify: Reload sysctl

    - name: Enable and load required kernel modules
      block:
        - name: Load overlay module
          modprobe:
            name: overlay
            state: present

        - name: Load br_netfilter module
          modprobe:
            name: br_netfilter
            state: present

        - name: Ensure modules are loaded on boot
          copy:
            dest: /etc/modules-load.d/k8s.conf
            content: |
              overlay
              br_netfilter

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Remove malformed docker.list if exists
      file:
        path: /etc/apt/sources.list.d/docker.list
        state: absent
      ignore_errors: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        keyring: /etc/apt/keyrings/docker.gpg

    - name: Debug ansible_architecture and ansible_distribution_release
      debug:
        msg:
          - "Ansible Architecture: {{ ansible_architecture }}"
          - "Ansible Distribution Release: {{ ansible_distribution_release }}"

    - name: Add Docker APT repository
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable"
        filename: docker
        state: present

    - name: Verify docker.list content
      command: cat /etc/apt/sources.list.d/docker.list
      register: docker_list_content
      ignore_errors: yes

    - name: Display docker.list content
      debug:
        var: docker_list_content.stdout

    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes

    - name: Install containerd.io
      apt:
        name: containerd.io
        state: present
        update_cache: yes

    - name: Generate containerd configuration
      command: containerd config default
      register: containerd_config
      changed_when: false

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Write containerd configuration
      copy:
        dest: /etc/containerd/config.toml
        content: "{{ containerd_config.stdout }}"
        owner: root
        group: root
        mode: '0644'

    - name: Set SystemdCgroup to true in containerd config
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart containerd service
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: Add Kubernetes APT repository GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
        state: present

    - name: Add Kubernetes APT repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
        filename: kubernetes
        state: present

    - name: Create directory for Kubernetes keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Kubernetes apt key
      command: >
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
        | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Update apt cache after adding Kubernetes repo
      apt:
        update_cache: yes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet={{ kubernetes_version }}
          - kubeadm={{ kubernetes_version }}
          - kubectl={{ kubernetes_version }}
        state: present
        update_cache: yes

    - name: Hold Kubernetes packages at current version
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: held

    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        enabled: yes
        state: started

    - name: Create kubeadm configuration file
      copy:
        dest: /root/kubeadm-config.yaml
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          kubernetesVersion: "{{ kubernetes_version }}"
          controlPlaneEndpoint: "{{ control_plane_endpoint }}"
          networking:
            podSubnet: "{{ pod_network_cidr }}"
          apiServer:
            certSANs:
              - "{{ internal_ipv4 }}"
            extraArgs:
              advertise-address: "{{ internal_ipv4 }}"

    - name: Initialize Kubernetes control plane
      command: kubeadm init --config=/root/kubeadm-config.yaml --upload-certs --node-name=cpl-node-1
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init
      ignore_errors: yes

    - name: Fail if kubeadm init failed
      fail:
        msg: "kubeadm init failed. Check the logs."
      when: kubeadm_init.rc != 0

    - name: Create kube config directory for user
      file:
        path: "/root/.kube"
        state: directory
        mode: '0755'
        owner: "root"
        group: "root"

    - name: Copy kube config to user directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/root/.kube/config"
        owner: "root"
        group: "root"
        mode: '0644'
      when: kubeadm_init.changed

    - name: Remove master taint to allow scheduling pods on control plane (optional)
      command: kubectl taint nodes --all node-role.kubernetes.io/master-
      when: kubeadm_init.changed

    - name: Save kubeadm join command (optional)
      shell: kubeadm token create --print-join-command
      register: join_command
      when: kubeadm_init.changed

    - name: Display join command (optional)
      debug:
        msg: "{{ join_command.stdout }}"
      when: kubeadm_init.changed

  handlers:
    - name: Reload sysctl
      command: sysctl --system

- name: Fetch kubeconfig to Local Machine
  hosts: control_plane_nodes
  gather_facts: no
  become: false
  tasks:
    - name: Create local .kube directory
      delegate_to: localhost
      file:
        path: "{{ lookup('env', 'HOME') }}/.kube"
        state: directory
        mode: '0755'

    - name: Fetch kubeconfig from control plane
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: "{{ lookup('env', 'HOME') }}/.kube/config"
        flat: yes
      delegate_to: localhost

    - name: Set permissions for kubeconfig
      delegate_to: localhost
      file:
        path: "{{ lookup('env', 'HOME') }}/.kube/config"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: '0644'

    - name: Display success message
      delegate_to: localhost
      debug:
        msg: "kubeconfig has been saved to ~/.kube/config"
